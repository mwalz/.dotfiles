[include]
    path = ~/.gitconfig_private
[apply]
    whitespace = fix
[core]
    ## autocrlf = true
    ## safecrlf = true
    excludesfile = ~/.gitignore
    attributesfile = ~/.gitattributes
    whitespace = fix,space-before-tab,tab-in-indent,trailing-space
    trustctime = false
    editor = vi
[alias]
    c = commit -m
    a = add
    br = branch
    co = checkout
    w = whatchanged
    di = diff
    dic = diff --cached
    pick = cherry-pick
    pl = pull
    ps = push
    plre = pull --rebase
    st = status
    out = log origin..HEAD
    qpl = log --pretty=\"%Cblue%h%Creset %Cgreen[%cr]%Creset %s\" origin/production..origin/master
    graph = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr)%Creset' --abbrev-commit --date=relative
    ci = commit
    ca = commit --amend
    pr = remote prune origin
    up = !git fetch origin && git rebase origin/master
    rbc = rebase --continue
    rbi = rebase -i
    mm = !test `git rev-parse master` = $(git merge-base HEAD master) && git checkout master && git merge HEAD@{1} || echo "Non-fastforward"
    unmgd = !git branch -r --no-merged | grep -v HEAD | xargs -L1 git --no-pager log --pretty=tformat:'%Cgreen%d%Creset - %h by %an (%Cblue%ar%Creset)' -1
    mgd = !git branch -r --merged | grep -v HEAD | xargs -L1 git --no-pager log --pretty=tformat:'%Cgreen%d%Creset - %h by %an (%Cblue%ar%Creset)' -1

    undopush= !git push -f origin HEAD^:master

    cleanbranches = !"git branch --merged master | grep -v \"\\master\" | xargs -n 1 git branch -d"

    ## START Mutually Human GIT Scripts ##
    # +head+ shows the latest commit for the current branch
    head = log -n1

    # +del+ will have run "git rm" on any files you deleted so git knows to delete them to
    del = !"git status | grep deleted | cut -d' ' -f 5 | xargs git rm 2> /dev/null"

    # +cbranch+ returns the current branch you are on
    cbranch = !"git branch | grep '*' | cut -f2 -d' '"

    # +rbranch+ returns the remote branch for the current branch you are on assuming it
    # is named the same
    rbranch = !"git branch -r | grep -E \"/`git cbranch`$\" | grep -v -e \"->\""

    # +review+ shows changes in the remote branch that your current local branch does not have
    review = !"git log `git cbranch`..`git rbranch`"

    # +rreview+ shows changes in your local branch that its remote branch does not have
    rreview = !"git log `git rbranch`..`git cbranch`"

    # +pushr+ - pushes the current branch to the remote origin
    pushr = !"git push --set-upstream origin `git cbranch`"
    ## END Mutually Human GIT Scripts ##

[push]
    # default to tracking so git will only try to push the current branch
    # otherwise git push will push all branches which can be problematic if you have
    # changes in a branch that were not ready to be pushed (or if you use -f to force a push
    # will overwrite remote branches when you only wanted to force-push the current branch)
    default = tracking
[color]
    ui = auto
    status = auto
    branch = auto
    diff = auto
    interactive = auto
[color "branch"]
    current = yellow reverse
    local = yellow
    remote = green
[color "diff"]
    meta = yellow bold
    frag = magenta bold
    old = red bold
    new = green bold
[color "status"]
    added = yellow
    changed = green
    untracked = cyan
[merge]
    log = true
[url "git@github.com:"]
    insteadOf = "gh:"
    pushInsteadOf = "github:"
    pushInsteadOf = "git://github.com/"
[url "git://github.com/"]
    insteadOf = "github:"
[url "git@gist.github.com:"]
    insteadOf = "gst:"
    pushInsteadOf = "gist:"
    pushInsteadOf = "git://gist.github.com/"
[url "git://gist.github.com/"]
    insteadOf = "gist:"
[mergetool]
	keepBackup = true
[difftool "sourcetree"]
	cmd = opendiff \"$LOCAL\" \"$REMOTE\"
	path =
[mergetool "sourcetree"]
	cmd = /Applications/SourceTree.app/Contents/Resources/opendiff-w.sh \"$LOCAL\" \"$REMOTE\" -ancestor \"$BASE\" -merge \"$MERGED\"
	trustExitCode = true
[filter "media"]
	clean = git media clean %f
	smudge = git media smudge %f
	required = true
[filter "lfs"]
	clean = git-lfs clean -- %f
	smudge = git-lfs smudge -- %f
	process = git-lfs filter-process
	required = true
[credential]
	helper = osxkeychain
